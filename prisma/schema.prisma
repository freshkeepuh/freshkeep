// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

/**
 * Prisma Client Generator
 */
generator client {
  provider = "prisma-client-js"
}

/**
 * The DB Datasource
 */
datasource db {
  provider = "postgresql"
  // for local development
  url      = env("DATABASE_URL")
  // for Vercel
  // url       = env("POSTGRES_PRISMA_URL")
  // directUrl = env("POSTGRES_URL_NON_POOLING")
}

/**
 * Roles
 * Used By: User
 */
enum Role {
  USER // Can use all features, except managing users
  ADMIN // Can use all features, including managing users
}

/**
 * Users
 * Represents a user with their settings JSON-encoded
 * Uses: Role
 */
model User {
  id        String   @id @default(uuid()) @map("_id")
  email     String   @unique
  password  String
  role      Role     @default(USER)
  settings  Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

/**
 * Unit of Measure
 * Factor is how many of the base unit are in one quantity of child unit.
 * Example: 128 Oz in a Gallon, so Gallon has a Factor of 128
 * Used By: Product, ProductInstance, Unit
 * Uses: Unit
 */
model Unit {
  id           String        @id @default(uuid()) @map("_id")
  name         String        @unique
  abbr         String        @unique
  base         Unit?         @relation("UnitsToUnits", fields: [baseId], references: [id])
  baseId       String?
  factor       Float         @default(1.0)
  children     Unit[]        @relation("UnitsToUnits")
  products     Product[]
  instances    ProductInstance[]
  shoppingListItems ShoppingListItem[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

// TODO: Create Icons in public/icons/{country}.svg, flags?
/**
 * Country
 * Limited to USA and Canada so that we don't have to worry about international addressing
 * Used By: Location
 */
enum Country {
  USA
  CAN
}

// TODO: Create Icon in public/icons/location.svg
/**
 * The Location
 * Used By: Container, ProductInstance
 * Uses: Country, Container, ProductInstance
 */
model Location {
  id         String      @id @default(uuid()) @map("_id")
  name       String      @unique
  address1   String
  address2   String?
  city       String
  state      String
  zipcode    String
  country    Country     @default(USA)
  picture    String?
  containers Container[]
  instances  ProductInstance[]
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}

// TODO: Create Icons in public/icons/{containertype}.svg
/**
 * Container Type
 * Used By: Container
 */
enum ContainerType {
  Refrigerator
  Freezer
  Pantry
  SpiceRack
}

/**
 * The Container (Fridge, Freezer, Pantry or Spice Rack) in the Location
 * Used By: ProductInstance
 * Uses: ContainerType, Location, ProductInstance
 */
model Container {
  id        String        @id @default(uuid()) @map("_id")
  location  Location      @relation(fields: [locId], references: [id])
  locId     String
  name      String        @unique
  type      ContainerType
  picture   String?
  items     ProductInstance[]
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
}

// TODO: Create Icons in public/icons/{category}.svg
/**
 * The Category of the Product.
 * Shopping Lists should be grouped by this.
 * Used By: Product
 */

enum ProductCategory {
  Fruits
  Vegetables
  CannedGoods
  Dairy
  Meat
  FishSeafood
  Deli
  Condiments
  Spices
  Snacks
  Bakery
  Beverages
  Pasta
  Grains
  Cereal
  Baking
  FrozenFoods
  Other
}

/**
 * The Product the represents an item found in a Grocery Store
 * Something the user Buys but may not stock or have at hand.
 * Used By: ProductInstance
 * Uses: ProductCategory, Unit
 */
model Product {
  id         String          @id @default(uuid()) @map("_id")
  name       String          @unique
  brand      String?
  category   ProductCategory
  unitId     String
  defaultQty Float           @default(1.0)
  isNeeded   Boolean         @default(false)
  picture    String?
  unit       Unit            @relation(fields: [unitId], references: [id])
  instances  ProductInstance[]
  shoppingListItems ShoppingListItem[]
  stores     Store[]
  createdAt  DateTime        @default(now())
  updatedAt  DateTime        @updatedAt

  @@index([category, name], name: "category_name_idx")
}

/**
 * The instance of the Product
 * Represents a physical item. It has its own units and records a quantity and expiration date.
 * Used By: Location, Container, Product, and Unit
 * Uses: Location, Container, Product, and Unit
 */
model ProductInstance {
  id          String      @id @default(uuid()) @map("_id")
  locId       String
  conId       String
  prodId      String
  unitId      String
  quantity    Float       @default(0.0)
  expiresAt   DateTime?
  location    Location    @relation(fields: [locId], references: [id])
  container   Container   @relation(fields: [conId], references: [id])
  product     Product     @relation(fields: [prodId], references: [id])
  unit        Unit        @relation(fields: [unitId], references: [id])
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@unique([locId, conId, prodId, unitId, expiresAt])
}

 /**
  * The Shopping List
  * Uses: User, Store, ShoppingListItem
  */
model ShoppingList {
  id            String              @id @default(uuid()) @map("_id")
  name          String              @unique
  storeId       String
  isDefault     Boolean             @default(false)
  store         Store               @relation(fields: [storeId], references: [id])
  items         ShoppingListItem[]
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt

  @@unique([storeId, createdAt])
}
 
 
 /**
 * Shopping List Items
 * Uses: Product, ShoppingList, Unit
 */
model ShoppingListItem {
  id            String       @id @default(uuid()) @map("_id")
  listId        String
  prodId        String
  quantity      Float        @default(1.0)
  unitId        String
  isPurchased   Boolean      @default(false)
  list          ShoppingList @relation(fields: [listId], references: [id])
  product       Product      @relation(fields: [prodId], references: [id])
  unit          Unit         @relation(fields: [unitId], references: [id])
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  @@unique([listId, prodId, unitId])
}

/**
 * Grocery Stores
 * Uses: Country, Product, ShoppingList
 * Used By: Product, ShoppingList
 */
model Store {
  id            String      @id @default(uuid()) @map("_id")
  name          String
  address1      String?
  address2      String?
  city          String?
  state         String?
  zipcode       String?
  country       Country     @default(USA)
  phone         String?
  website       String?
  picture       String?
  shoppingLists ShoppingList[]
  products      Product[]
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@unique([name])
}